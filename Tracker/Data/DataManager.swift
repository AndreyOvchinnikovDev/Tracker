//
//  DataManager.swift
//  Tracker
//
//  Created by Andrey Ovchinnikov on 23.06.2023.
//

import Foundation

final class DataManager {
    static let shared = DataManager()
    
    var categories: [TrackerCategory] = [
        TrackerCategory(
            name: "–£—á–µ–±–∞",
            trackers: [
                Tracker(
                    id: UUID(),
                    name: "—Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É",
                    color: .colorSection1,
                    emoji: "üôÇ",
                    schedule: [.Friday, .Thursday, .Saturday, .Monday, .Wednesday, .Tuesday]
                ),
                Tracker(
                    id: UUID(),
                    name: "–ø—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                    color: .colorSection13,
                    emoji: "üòª",
                    schedule: [.Monday]
                ),
                Tracker(
                    id: UUID(),
                    name: "–µ—â–µ —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª",
                    color: .colorSection13,
                    emoji: "üòª",
                    schedule: [.Saturday]
                ),
                Tracker(
                    id: UUID(),
                    name: "–∏ –µ—â–µ —Ä–∞–∑",
                    color: .colorSection7,
                    emoji: "üòª",
                    schedule: [.Saturday]
                )
            ]
        ),
        
        TrackerCategory(
            name: "–£–±–æ—Ä–∫–∞",
            trackers: [
                Tracker(
                    id: UUID(),
                    name: "–£–±–∏—Ä–∞—Ç—å—Å—è –ø–æ–∫–∞ –Ω–µ —É–±–µ—Ä–µ—à—å—Å—è",
                    color: .colorSection10,
                    emoji: "üå∫",
                    schedule: [.Saturday, .Monday, .Wednesday]
                )
            ]
        )
    ]
        
    private init() {}
    
    // MARK: - Public Methods
    func createAndAddReplacedCategory(nameCategory: String, tracker: Tracker) {
        let existCategory = categories.filter { $0.name == nameCategory }
        var newTrackers = [Tracker]()
        existCategory.forEach { newTrackers += $0.trackers }
        newTrackers.append(tracker)
        
        let replacedCategory = TrackerCategory(name: nameCategory, trackers: newTrackers)
        var newCategories = [TrackerCategory]()
        newCategories = categories
        if let index = newCategories.firstIndex(where: { $0.name == nameCategory }) {
            newCategories[index] = replacedCategory
        }
        categories = newCategories
    }
    
    func createAndAddCategory(nameCategory: String, tracker: Tracker) {
        var newCategories = [TrackerCategory]()
        newCategories = categories
        
        let newCategory = TrackerCategory(name: nameCategory, trackers: [tracker])
        newCategories.append(newCategory)
        categories = newCategories
    }
}



